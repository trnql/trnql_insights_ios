// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import CoreMotion;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface CMMotionActivity (SWIFT_EXTENSION(trnql))
@end


@interface CMMotionActivity (SWIFT_EXTENSION(trnql))
@end


@interface NSDate (SWIFT_EXTENSION(trnql))
@end


@interface NSNumber (SWIFT_EXTENSION(trnql))
@end


@interface NSObject (SWIFT_EXTENSION(trnql))
@end

@protocol TrnqlDelegate;


/// trnql
SWIFT_CLASS("_TtC5trnql5Trnql")
@interface Trnql : NSObject

/// The trnql API key.
+ (NSString * _Nullable)apiKey;
+ (void)setApiKey:(NSString * _Nullable)value;

/// Controls whether or not the app should stay awake in the background to continuously collect analytics. Note that "Always On" location services are required for this.
+ (BOOL)collectAnalyticsInBackground;
+ (void)setCollectAnalyticsInBackground:(BOOL)value;

/// The email address to be contacted in case of a problem (i.e. an invalid API key)
+ (NSString * _Nullable)contactEmail;
+ (void)setContactEmail:(NSString * _Nullable)value;

/// The distance (in meters) within which to search for places. This radius also sets the threshold for the distance that must be traveled (in meters) before a new query for nearby places is performed. The search radius must be between 500 and 50,000.
+ (double)searchRadiusForPlaces;
+ (void)setSearchRadiusForPlaces:(double)newValue;

/// The distance (in meters) within which to search for people. This is required to search for nearby people.
+ (double)searchRadiusForPeople;
+ (void)setSearchRadiusForPeople:(double)newValue;

/// The data payload to be distributed to nearby people. This is not required to search for nearby people.
+ (NSString * _Nullable)dataPayloadForPeople;
+ (void)setDataPayloadForPeople:(NSString * _Nullable)newValue;

/// The product name. This is not required to search for nearby people.
+ (NSString * _Nullable)productNameForPeople;
+ (void)setProductNameForPeople:(NSString * _Nullable)newValue;

/// A unique ID used to identify a specific user. This is required to search for nearby people.
+ (NSString * _Nullable)userTokenForPeople;
+ (void)setUserTokenForPeople:(NSString * _Nullable)newValue;

/// The classes conforming to and implementing the methods of the TrnqlDelegate protocol.
+ (NSArray<id <TrnqlDelegate>> * _Nonnull)delegates;
+ (void)setDelegates:(NSArray<id <TrnqlDelegate>> * _Nonnull)value;

/// Starts the collection and reporting of insights.
+ (void)start;

/// Stops the collection and reporting of insights.
+ (void)stop;

/// Add a delegate to be notified when the TrnqlDelegate is called.
///
/// \param delegate The delegate to be notified of the change.
+ (void)addDelegate:(id <TrnqlDelegate> _Nonnull)delegate;

/// Remove a delegate from being notified when the TrnqlDelegate is called.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)removeDelegate:(id <TrnqlDelegate> _Nonnull)delegate;

/// Requests location authorization for when the app is being used.
+ (void)requestWhenInUseLocationAuthorization;

/// Requests location authorization for when the app is being used as well as when the app is in the background.
+ (void)requestAlwaysLocationAuthorization;

/// Requests permission to access user's motion activity.
+ (void)requestActivityPermission;

/// Takes a snapshot of the user's context at this moment in time.
///
/// \param name The unique name used to identify the event.
+ (void)takeContextSnapshotForEventNamed:(NSString * _Nonnull)name;

/// Reports that a screen with a given name became active.
///
/// \param name The name of the screen.
+ (void)screenBecameActive:(NSString * _Nonnull)name;

/// Reports that a screen with a given name became inactive.
///
/// \param name The name of the screen.
+ (void)screenBecameInactive:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;


/// The TrnqlDelegate protocol defines the methods used to receive updates from the trnql framework.
SWIFT_PROTOCOL("_TtP5trnql13TrnqlDelegate_")
@protocol TrnqlDelegate

/// Tells the delegate that some part of trnql encountered an error.
///
/// \param error The error object containing a description of the error.
- (void)trnqlDidEncounterError:(NSError * _Nonnull)error;
@optional

/// Tells the delegate that an operation (such as the taking of a snapshot) completed successfully. This method is optional and only meant to be used for debugging purposes.
///
/// \param message A message describing the operation that was completed.
- (void)trnqlOperationDidComplete:(NSString * _Nonnull)message;
@end


@interface UIApplication (SWIFT_EXTENSION(trnql))
@end


@interface UIDevice (SWIFT_EXTENSION(trnql))
@end

#pragma clang diagnostic pop
